import requests
import xml.etree.ElementTree as ET
import json

# Define the SQLMap API URL
sqlmap_api_url = 'http://127.0.0.1:8775'  # Update with your SQLMap API endpoint
proxy_url = 'http://127.0.0.1:8080'  # Update with your proxy URL

# Function to start a new SQLMap scan with a proxy
def start_sqlmap_scan(url, data, cookies):
    scan_data = {
        "url": url,
        "data": data,
        "cookie": cookies,
        "level": 3,
        "risk": 2,
        "proxy": proxy_url,  # Specify your proxy URL here
    }

    # Send a POST request to start the scan
    response = requests.post(f"{sqlmap_api_url}/scan", json=scan_data)
    scan_id = response.json()['scan']['id']
    return scan_id

# Function to check the status of a SQLMap scan
def check_scan_status(scan_id):
    response = requests.get(f"{sqlmap_api_url}/scan/{scan_id}/status")
    status = response.json()['status']
    return status

# Function to retrieve scan results
def get_scan_results(scan_id):
    response = requests.get(f"{sqlmap_api_url}/scan/{scan_id}/data")
    return response.json()

# Parse the XML file containing requests
xml_file = "requests.xml"  # Update with your XML file path
tree = ET.parse(xml_file)
root = tree.getroot()

# Iterate through the requests in the XML
for request in root.findall('request'):
    url = request.find('url').text
    data = request.find('data').text
    cookies = request.find('cookies').text

    # Start a new SQLMap scan with the specified proxy
    scan_id = start_sqlmap_scan(url, data, cookies)

    # Check the scan status and wait for it to finish
    while True:
        status = check_scan_status(scan_id)
        if status == "running":
            time.sleep(10)  # Wait for 10 seconds
        else:
            break

    # Get and print scan results
    results = get_scan_results(scan_id)
    print(json.dumps(results, indent=2))

# Note: Ensure you have a running SQLMap API server and a proxy set up before running this script.
